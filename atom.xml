<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s blog</title>
  
  <subtitle>We are in the same story.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mazhixian.me/"/>
  <updated>2018-01-12T06:05:36.335Z</updated>
  <id>http://www.mazhixian.me/</id>
  
  <author>
    <name>Jason Ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Capture vidwo flow from firefox</title>
    <link href="http://www.mazhixian.me/2018/01/12/capture-video-flow-from-firefox/"/>
    <id>http://www.mazhixian.me/2018/01/12/capture-video-flow-from-firefox/</id>
    <published>2018-01-12T05:17:08.000Z</published>
    <updated>2018-01-12T06:05:36.335Z</updated>
    
    <content type="html"><![CDATA[<p>今天讨论网页视频流抓取问题，针对Firefox浏览器，有两种方法。</p><ol><li>直接从Firefox的缓存中获取;</li><li>利用flash流的进程号，在系统/proc下抓取缓存的数据流。</li></ol><h3 id="Firefox-缓存提取"><a href="#Firefox-缓存提取" class="headerlink" title="Firefox 缓存提取"></a>Firefox 缓存提取</h3><p>Firefox的缓存保存在如下的路径中，其中<code>f176xa6s.default</code>不同的用户会不同，其他路径成分基本相同。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.cache/mozilla/firefox/fl76xa6s.default/cache2/entries</div></pre></td></tr></table></figure></p><p>进入缓存文件夹后，便可以根据时间和文件大小搜索缓存文件。因为文件名是16进制编码的，无法体现文件内容，所以不考虑。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -lSt</div></pre></td></tr></table></figure></p><p>其中<code>-S</code>表示按文件大小排序，<code>-t</code>表示按时间先后排序。</p><p>通常视频文件大小为<code>MB</code>量级，所以一般排序在前的几个文件会是缓存的视频。</p><h3 id="Firefox-flash-flow-抓取"><a href="#Firefox-flash-flow-抓取" class="headerlink" title="Firefox flash flow 抓取"></a>Firefox flash flow 抓取</h3><p>从Firefox网页抓取flash插件播放的视频流的步骤分为三步，(1) 打开视频、(2) 获取flash播放进程ID、(3) 视频流转存。</p><h4 id="Step1-打开视频"><a href="#Step1-打开视频" class="headerlink" title="Step1 打开视频"></a>Step1 打开视频</h4><p>在浏览器播放视频，此处需要firefox支持flash，或者安装adobe flash插件。</p><h4 id="Step2-获取flash播放进程ID"><a href="#Step2-获取flash播放进程ID" class="headerlink" title="Step2 获取flash播放进程ID"></a>Step2 获取flash播放进程ID</h4><p>利用<code>lsof</code>抓取正在运行的<code>Flash</code>进程，如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsof | grep Flash</div></pre></td></tr></table></figure></p><p>会输出如下类似的结果，其中<code>31346</code>即为目标ID.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugin-co 31346 user 26u REG 8,5  4561004  787806 /tmp/FlashXXJa3CWn (deleted)</div></pre></td></tr></table></figure></p><h4 id="Step3-视频流转存"><a href="#Step3-视频流转存" class="headerlink" title="Step3 视频流转存"></a>Step3 视频流转存</h4><p>参考<a href="http://www.cpplive.com/html/1424.html" target="_blank" rel="external">博客</a>: Linux下的浏览器播放flv视频都是采用的Flash播放器，而Flash播放器在播放每个视频的时候都会在/tmp目录下创建以“Flash”字样开头做标识的缓存文件，但是如果我们进入到/tmp目录下察看所有文件，却找不到正在播放的缓存文件，因为这些视频缓存文件只有系统可见，对用户是隐藏的。因此，我们可以根据Flash进程的ID，进入系统进程文件<code>/proc</code>下，获取缓存的视频流。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ls /proc/31346/fd</div><div class="line"><span class="comment"># 找到类似如下的行，其中 26 便是视频流缓存</span></div><div class="line">lrwx------ 1 user user 64 Jan  12 12:07 26 -&gt; /tmp/FlashXXJa3CWn (deleted)</div></pre></td></tr></table></figure><p>利用<code>cat</code>和<code>管道</code>,将数据流输入到<code>.flv</code>文件中。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat /proc/31346/fd/26 &gt; ~/Desktop/test1.flv</div></pre></td></tr></table></figure></p><h3 id="视频格式转换"><a href="#视频格式转换" class="headerlink" title="视频格式转换"></a>视频格式转换</h3><p>利用<code>mencoder</code>可以对视频文件进行格式转换，<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mencoder -ovc lavc -lavcopts vcodec=mpeg4 -oac mp3lame source.flv -o dest.mp4</div></pre></td></tr></table></figure></p><p>其中参数含义如下，参考了<a href="https://www.cnblogs.com/jdksummer/articles/2561461.html" target="_blank" rel="external">此文</a></p><ul><li><p>-ovc lavc：（output video codec）指定输出视频文件的视频编码类型，此处选择的是 Libavcodec 的视频编码；</p></li><li><p>-lavcopts vcodec=mpeg4：（Libavcodec options）指定视频编码的设置，由于 Libavcodec 包含了多种视频编码，所以用 vcodec=mpeg4 来指定具体的使用 MPEG-4 编码；</p></li><li><p>-oac mp3lame：（output audio codec）指定输出媒体文件的音频编码类型，此处选择的是 mp3lame；</p></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="http://www.cpplive.com/html/1424.html" target="_blank" rel="external">Linux下提取保存浏览器中的视频</a><br>[2] <a href="https://www.cnblogs.com/jdksummer/articles/2561461.html" target="_blank" rel="external">linux下视频格式转换工具</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天讨论网页视频流抓取问题，针对Firefox浏览器，有两种方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接从Firefox的缓存中获取;&lt;/li&gt;
&lt;li&gt;利用flash流的进程号，在系统/proc下抓取缓存的数据流。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Firefox-缓存提取
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.mazhixian.me/all-tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>monte carlo simulation</title>
    <link href="http://www.mazhixian.me/2018/01/03/monte-carlo-simulation/"/>
    <id>http://www.mazhixian.me/2018/01/03/monte-carlo-simulation/</id>
    <published>2018-01-03T12:24:28.000Z</published>
    <updated>2018-01-04T01:44:15.464Z</updated>
    
    <content type="html"><![CDATA[<p>蒙特卡罗方法帮助产生服从样本分布的新样本，并且实现参数的估计，是一种基于贝叶斯统计的算法。机器学习中的许多重要工具都基于从某种分布中采样，以及用这些样本对目标量做一个蒙特卡罗估计。</p><h3 id="Why-sampling-and-Monte-Carlo"><a href="#Why-sampling-and-Monte-Carlo" class="headerlink" title="Why sampling and Monte Carlo?"></a>Why sampling and Monte Carlo?</h3><p>当无法精确计算和或积分时，通常可以使用蒙特卡罗采样来近似。这种想法把和或积分视作某分布下的期望，然后通过估计对应的平均值来近似这个期望。而这里的估计用到了中心极限定理，即$\hat{s}_n$收敛到以s为均值，以$Var[f(x)]/n$为方差的正态分布。而马尔可夫链蒙特卡罗方法(MCMC)，就是用一种方式构建一个收敛到目标分布的估计序列。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;蒙特卡罗方法帮助产生服从样本分布的新样本，并且实现参数的估计，是一种基于贝叶斯统计的算法。机器学习中的许多重要工具都基于从某种分布中采样，以及用这些样本对目标量做一个蒙特卡罗估计。&lt;/p&gt;
&lt;h3 id=&quot;Why-sampling-and-Monte-Carlo&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="deep-learning" scheme="http://www.mazhixian.me/all-tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>Libsvm for python</title>
    <link href="http://www.mazhixian.me/2018/01/02/libsvm-for-python/"/>
    <id>http://www.mazhixian.me/2018/01/02/libsvm-for-python/</id>
    <published>2018-01-02T14:50:08.000Z</published>
    <updated>2018-01-02T15:35:48.155Z</updated>
    
    <content type="html"><![CDATA[<p>Happy new year!! Feel blue but still have to work. </p><p>I am gonna introduce the application of a famous package namely <a href="https://www.csie.ntu.edu.tw/~cjlin/libsvm/" target="_blank" rel="external">libsvm</a>, which realizes the <a href="https://en.wikipedia.org/wiki/Support_vector_machine" target="_blank" rel="external">support vector machin (SVM)</a> based algorithms and supports multiple programming languages. I have designed SVM based approaches for machine-learning tasks on MATLAB by the libsvm, which is very awsome. Now, it’s time to try it on python, though it has been encapsulated in the <a href="https://www.scipy.org" target="_blank" rel="external">SciPy</a>.</p><p>To use libsvm on python, you may follow the coming steps.</p><ol><li><p>Download the <a href="http://www.csie.ntu.edu.tw/~cjlin/cgi-bin/libsvm.cgi?+http://www.csie.ntu.edu.tw/~cjlin/libsvm+tar.gz" target="_blank" rel="external">package</a> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -O libsvm.tar.gz http://www.csie.ntu.edu.tw/~cjlin/cgi-bin/libsvm.cgi?+http://www.csie.ntu.edu.tw/~cjlin/libsvm+tar.gz</div></pre></td></tr></table></figure></li><li><p>unzip the package</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tar -xvf libsvm.tar.gz</div></pre></td></tr></table></figure></li><li><p>Installization</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> libsvm-3.22</div><div class="line">$ make</div></pre></td></tr></table></figure></li></ol><p>If it generates four <code>svm-</code> prefixed files as well as the library <code>libsvm.so.2</code>, then the installization is completed.</p><p>Now you can take a trial with provided python based utilities in the folder <code>./python</code>. For instance,<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> svmutil <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y, x = svm_read_problem(<span class="string">'../heart_scale'</span>) <span class="comment"># load data </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = svm_train(y[:<span class="number">200</span>], x[:<span class="number">200</span>], <span class="string">'-c 4'</span>) <span class="comment"># train a SVM model</span></div><div class="line"><span class="comment"># This will output like,</span></div><div class="line">*.*</div><div class="line">optimization finished, <span class="comment">#iter = 257</span></div><div class="line">nu = <span class="number">0.351161</span></div><div class="line">obj = <span class="number">-225.628984</span>, rho = <span class="number">0.636110</span></div><div class="line">nSV = <span class="number">91</span>, nBSV = <span class="number">49</span></div><div class="line">Total nSV = <span class="number">91</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p_label, p_acc, p_val = svm_predict(y[<span class="number">200</span>:], x[<span class="number">200</span>:], m) <span class="comment"># make a test</span></div><div class="line">Accuracy = <span class="number">84.2857</span>% (<span class="number">59</span>/<span class="number">70</span>) (classification)</div></pre></td></tr></table></figure></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>As introduced by the <code>README</code> in the <code>./python</code> folder, two <code>.py</code> scripts are provided, of which <code>svm.py</code> and <code>svmutil.py</code> are corresponding to low-level and high-level use of the interface. In my opinion, I suggest the users to directly use <code>svmutil.py</code>.</p><p>In addition, the python scripts rely on the <code>libsvm.so.2</code>, which should be added into the <code>LD_LIBRARY_PATH</code> or a <code>package not find</code> exception will be raised when import svm.</p><p>Now, time to do your machine learning work.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Happy new year!! Feel blue but still have to work. &lt;/p&gt;
&lt;p&gt;I am gonna introduce the application of a famous package namely &lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.mazhixian.me/all-tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.10 Configure your new server</title>
    <link href="http://www.mazhixian.me/2017/12/25/ubuntu1610-configure-your-new-server/"/>
    <id>http://www.mazhixian.me/2017/12/25/ubuntu1610-configure-your-new-server/</id>
    <published>2017-12-25T07:20:37.000Z</published>
    <updated>2017-12-25T15:11:33.497Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu server的防火墙配置问题，包括新用户添加、防火墙规则设定以及ssh的简单设置,写得比较简单，慢慢理解以后来填坑。主要的references见文末，另外说一句 Merry Xmas!</p><h4 id="Change-or-update-root-pwd"><a href="#Change-or-update-root-pwd" class="headerlink" title="Change or update root pwd"></a>Change or update root pwd</h4><p>修改或者初始化root的密码,如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo passwd root</div><div class="line">New password: xxxx</div><div class="line">Retype new password: xxxx</div></pre></td></tr></table></figure></p><h4 id="Add-a-new-user"><a href="#Add-a-new-user" class="headerlink" title="Add a new user"></a>Add a new user</h4><p>Ubuntu server在安装好以后只有Root用户，为了方便管理，通常需要添加一个用户以方便管理，并且为了服务器的安全性，需要配置ssh的key only和防火墙。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sudo apt update <span class="comment"># optional </span></div><div class="line">sudo apt upgrade <span class="comment"># optional</span></div><div class="line">sudo apt install vim <span class="comment"># install vim, optional </span></div><div class="line">sudo adduser jason  <span class="comment"># Add a new user</span></div><div class="line">sudo usermod -G root jason <span class="comment"># Add user jason into Group root</span></div><div class="line"><span class="comment"># Add sudoer authority</span></div><div class="line">sudo chmod u+w /etc/sudoers <span class="comment"># Change sudoers from readonly to writtable</span></div><div class="line">sudo vim /etc/sudoers</div><div class="line"><span class="comment"># Add the line below root ALL=(ALL:ALL) ALL</span></div><div class="line">jason ALL=(ALL:ALL) ALL</div><div class="line">sudo chmod u-w /etc/sudoers <span class="comment"># Rechange mode of sudoers to readonly</span></div></pre></td></tr></table></figure></p><h4 id="SSH-confiurations"><a href="#SSH-confiurations" class="headerlink" title="SSH confiurations"></a>SSH confiurations</h4><p>ssh配置方便远程访问server，主要的配置包括端口修改、<code>aurhorized_keys</code>以及一些有助于安全性的配置。</p><h6 id="1-生成本机的Authentication-key-pair"><a href="#1-生成本机的Authentication-key-pair" class="headerlink" title="1. 生成本机的Authentication key-pair"></a>1. 生成本机的Authentication key-pair</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -b 4096</div></pre></td></tr></table></figure><p>选择默认的<code>id_rsa</code>和<code>id_rsa.pub</code>存储密钥对，并且选择不设定密码。</p><h6 id="2-添加该用户的public-key到server中"><a href="#2-添加该用户的public-key到server中" class="headerlink" title="2. 添加该用户的public key到server中"></a>2. 添加该用户的public key到server中</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.ssh</div><div class="line"><span class="built_in">cd</span> ~/.ssh</div><div class="line">touch authorized_keys</div><div class="line">vim authorized_keys</div><div class="line"><span class="comment"># Add your public key into this file like</span></div><div class="line">ssh-rsa xxxxx user@xxx</div></pre></td></tr></table></figure><h6 id="3-配置ssh端口及相应的安全选项"><a href="#3-配置ssh端口及相应的安全选项" class="headerlink" title="3. 配置ssh端口及相应的安全选项"></a>3. 配置ssh端口及相应的安全选项</h6><p><code>sshd</code>的配置文件存放在<code>/etc/ssh/sshd_config</code>中，<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vim /etc/ssh/sshd_config</div><div class="line"><span class="comment"># change port</span></div><div class="line">Port 2333 <span class="comment"># 默认的端口号为22，此处建议修改为其他值</span></div><div class="line"><span class="comment"># 禁止root登录</span></div><div class="line">PermitRootLogin no</div><div class="line"><span class="comment"># 禁止密码验证</span></div><div class="line">PasswordAuthentication no</div></pre></td></tr></table></figure></p><h6 id="4-重启ssh服务"><a href="#4-重启ssh服务" class="headerlink" title="4. 重启ssh服务"></a>4. 重启ssh服务</h6><p>配置完成后，重启<code>sshd</code>服务，如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart sshd</div></pre></td></tr></table></figure></p><h4 id="UFW-configuration"><a href="#UFW-configuration" class="headerlink" title="UFW configuration"></a>UFW configuration</h4><p>详细的UFW配置参考<a href="https://www.linode.com/docs/security/firewalls/configure-firewall-with-ufw/" target="_blank" rel="external">这篇文章</a>，下面列出我的配置并对解释。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">sudo apt install ufw</div><div class="line"><span class="comment"># allow all outgoing and deny all incoming</span></div><div class="line">sudo ufw default allow outgoing</div><div class="line">sudo ufw default deny incoming</div><div class="line"><span class="comment"># allow ssh</span></div><div class="line">sudo ufw allow ssh</div><div class="line"><span class="comment"># allow tcp udp http</span></div><div class="line">sudo ufw allow 80/tcp</div><div class="line">sudo ufw allow http/tcp</div><div class="line">sudo ufw allow 1725/udp</div><div class="line"><span class="comment"># enable ufw</span></div><div class="line">sudo ufw <span class="built_in">enable</span></div></pre></td></tr></table></figure></p><p>用<code>sudo ufw status</code>查看ufw的运行状态和配置结果，若显示如下列表，则说明配置好了，<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Status: active</div><div class="line"></div><div class="line">To                         Action      From</div><div class="line">--                         ------      ----</div><div class="line">80/tcp                     ALLOW       Anywhere                  </div><div class="line">1725/udp                   ALLOW       Anywhere                  </div><div class="line">2333                       ALLOW       Anywhere                  </div><div class="line">80/tcp (v6)                ALLOW       Anywhere (v6)             </div><div class="line">1725/udp (v6)              ALLOW       Anywhere (v6)             </div><div class="line">2333 (v6)                  ALLOW       Anywhere (v6)</div></pre></td></tr></table></figure></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://blog.csdn.net/zzllabcd/article/details/49992613" target="_blank" rel="external">ubuntu 添加 root用户权限和sudoer 权限</a></li><li><a href="https://www.linode.com/docs/security/firewalls/configure-firewall-with-ufw/" target="_blank" rel="external">Configure Firewall with UFW</a></li><li><a href="https://www.linode.com/docs/security/securing-your-server/" target="_blank" rel="external">How to Secure Your Server</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu server的防火墙配置问题，包括新用户添加、防火墙规则设定以及ssh的简单设置,写得比较简单，慢慢理解以后来填坑。主要的references见文末，另外说一句 Merry Xmas!&lt;/p&gt;
&lt;h4 id=&quot;Change-or-update-root-pwd
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.mazhixian.me/all-tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.10 launch user script when log in</title>
    <link href="http://www.mazhixian.me/2017/12/25/Ubuntu1610-launch-user-script-when-log-in/"/>
    <id>http://www.mazhixian.me/2017/12/25/Ubuntu1610-launch-user-script-when-log-in/</id>
    <published>2017-12-25T02:44:11.000Z</published>
    <updated>2017-12-25T04:31:46.337Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu自启动用户脚本的问题，流行的两种方法可以参考文末的References，此处讨论的是在user的start up里添加自定义脚本。</p><h5 id="Step1-prepare-your-script"><a href="#Step1-prepare-your-script" class="headerlink" title="Step1 prepare your script"></a>Step1 prepare your script</h5><p>准备待执行的脚本并修改权限为可执行，如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/<span class="built_in">local</span>/</div><div class="line">$ touch myscript.sh</div><div class="line">$ vim myscript.sh <span class="comment"># Add the lines you want to execute...</span></div><div class="line">$ chmod +x myscript.sh <span class="comment"># Change mode to executable</span></div></pre></td></tr></table></figure></p><h5 id="Step2-configure-the-conf-file"><a href="#Step2-configure-the-conf-file" class="headerlink" title="Step2 configure the .conf file"></a>Step2 configure the .conf file</h5><p>编写配置文件，放入<code>~/.config/upstart/</code>中，例如<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.config/upstart</div><div class="line">$ touch myscript.conf</div><div class="line">$ vim myscript.conf</div><div class="line"><span class="comment">#### configurations to be added.</span></div><div class="line">start on startup</div><div class="line">task</div><div class="line"><span class="built_in">exec</span> /home/usrname/<span class="built_in">local</span>/myscript.sh</div></pre></td></tr></table></figure></p><h5 id="Step3-log-out-and-relogin"><a href="#Step3-log-out-and-relogin" class="headerlink" title="Step3 log out and relogin"></a>Step3 log out and relogin</h5><p>重新登录，检验是否实现<code>myscript.sh</code>的自启动</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://blog.csdn.net/upshi/article/details/53884770" target="_blank" rel="external">Ubuntu添加开机启动执行脚本</a></li><li><a href="http://askubuntu.com/questions/814/how-to-run-scripts-on-start-up" target="_blank" rel="external">How to run scripts on start up</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu自启动用户脚本的问题，流行的两种方法可以参考文末的References，此处讨论的是在user的start up里添加自定义脚本。&lt;/p&gt;
&lt;h5 id=&quot;Step1-prepare-your-script&quot;&gt;&lt;a href=&quot;#Step1-prepare-yo
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.mazhixian.me/all-tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>HTML notebook2</title>
    <link href="http://www.mazhixian.me/2017/12/24/Learning-HTML-2/"/>
    <id>http://www.mazhixian.me/2017/12/24/Learning-HTML-2/</id>
    <published>2017-12-24T13:47:18.000Z</published>
    <updated>2017-12-27T14:57:24.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML-notebook-2-Construction"><a href="#HTML-notebook-2-Construction" class="headerlink" title="HTML notebook 2: Construction"></a>HTML notebook 2: Construction</h2><p>在文档的head部分，通常要指明页面标题，提供为搜索引擎准备的关于页面本身的信息，加载样式表，以及加载JavaScript文件，不过处于性能考虑，多数时候在页面底部&lt;/body&gt;标签结束前加载JavaScript.</p><p>body元素包住页面的内容，包含文本、图像、表单、音频、视频以及其他交互式内容。</p><p>title元素是必需的，且不能包含人和格式、HTML、图像或指向其他页面的链接。title是搜索引擎抓取网站的基础，因此应该重视。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTML-notebook-2-Construction&quot;&gt;&lt;a href=&quot;#HTML-notebook-2-Construction&quot; class=&quot;headerlink&quot; title=&quot;HTML notebook 2: Construction&quot;&gt;&lt;/a&gt;H
      
    
    </summary>
    
    
      <category term="html-css" scheme="http://www.mazhixian.me/all-tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>HTML notebook</title>
    <link href="http://www.mazhixian.me/2017/12/24/Learning-HTML/"/>
    <id>http://www.mazhixian.me/2017/12/24/Learning-HTML/</id>
    <published>2017-12-24T04:57:51.000Z</published>
    <updated>2017-12-24T14:03:27.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML-notebook-1-Components"><a href="#HTML-notebook-1-Components" class="headerlink" title="HTML notebook 1: Components"></a>HTML notebook 1: Components</h2><p>入了HTML和JavaScript的坑，趁着年末事情没那么多 (假装不多)，学习一下，不知道能坚持多久，LOL… 参考的书有如下三本，</p><ol><li>Castro, E. and Hyslop, B. HTML and CSS Visual QuickStart Guide 8th Ed.</li><li>Keith, J. and Sambells, J. DOM Scripting Web Design with JavaScript and Document OBject Model</li><li>Zakas, N. Professional JavaScript for Web Developers 3rd Ed.</li></ol><p>边看边手动记笔记，有空整理一下。</p><p>HTML的一个很好的理解，<strong>为网页内容打上能够描述它们的标签</strong>，但HTML元素描述的是内容是什么，而不是内容本身的特征，更像一个盒子。CSS用来控制内容的外观(如字体、颜色和阴影等)。访问者看到的内容位于主体<code>body</code>部分，即<code>&lt;body&gt;</code>和<code>&lt;/body&gt;</code>之间的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> My page <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>每个网页都包含<code>DOCTYPE</code>、<code>html</code>、<code>head</code>和<code>body</code>元素，它们是网页的基础。HTML使用<code>&lt;&gt;</code>包围标签，包含开始和结束标签，其中结束标签在<code>&lt;</code>后增加<code>/</code>符号。</p><ul><li><code>&lt;body&gt;</code>开始标签以上的内容为浏览器和搜索引擎准备;</li><li><code>&lt;!DOCTYPE html&gt;</code>表示这是一个html5页面，<code>DOCTYPE</code>应该始终位于页面第一行;</li><li><code>&lt;title&gt;</code>和<code>&lt;\title&gt;</code>之间用于显示页面的标题;</li><li>h1是标题，a是链接，img是图像。</li></ul><h5 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h5><p>元素有一个或多个属性、属性用来进一步描述元素 (<strong>考虑画图</strong>)。 元素由开始标签、内容和结束标签组成。习惯上，标签采用小写字母。还有一些元素是空元素 (<strong>不包含文本内容</strong>)，形如<code>&lt;   \&gt;</code>，即开始标签和结束标签的结合，由左尖括号开头、元素的名称及包含的属性和右尖括号 (空格加”/“在HTML5中可选) 组成。</p><h5 id="属性和值"><a href="#属性和值" class="headerlink" title="属性和值"></a>属性和值</h5><p>属性包含了元素的额外信息，每个属性有各自的值。在HTML5中属性值两边的引号可选，但建议保留，形如<code>attr=&quot;value&quot;</code>的形式。有的属性可以接受仍和值，有的则有限制，最常见的是仅接受预定义值 (枚举值) 的属性。例如，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"screen"</span>(预定义值) <span class="attr">href</span>=<span class="string">"style.css"</span>(非预定义值) /&gt;</span></div></pre></td></tr></table></figure></p><p>有许多属性的值设置为数字，主要为描述大小和长度的属性，其中图像和视频的宽度和高度是有单位的，默认为像素。有的属性 (如<code>href</code>和<code>src</code>) 用于引用其他文件，它们只能包含URL形式的值。还有一种属性为布尔型，本身出现就表示<em>真</em>。</p><h5 id="父元素和子元素"><a href="#父元素和子元素" class="headerlink" title="父元素和子元素"></a>父元素和子元素</h5><p>如果一个元素包含另一个元素，该元素称为被包含元素的父元素，被包含元素称为子元素。这种结构是HTML的关键特性，有助于在元素上添加样式和应用JavaScript行为。例如，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> Blablabla...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> ... xxxxx <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></div></pre></td></tr></table></figure></p><h5 id="文本内容"><a href="#文本内容" class="headerlink" title="文本内容"></a>文本内容</h5><p>文本是元素的基本成分，<strong>在HTML中，文本中的多个空格或制表符会被压缩成单个空格，回车和换行符号会被转换为单个空格</strong>，旧版本的HTML只能只用ASCII字符，受限于此，特殊字符需要类似于<code>Latex</code>的语法来引用。<strong>目前，可以采用UTF-8编码来缓解这一问题。</strong>而要采用Unicode，需要在<head>之后进行定义，并指定`charset=”utf-8”，如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></head></p><h5 id="链接、图像和其他文本内容"><a href="#链接、图像和其他文本内容" class="headerlink" title="链接、图像和其他文本内容"></a>链接、图像和其他文本内容</h5><p><strong>HTML5提供了audio和video元素，避免了无Flash等插件便无法播放音频和视频的问题。</strong>，当然目前的多数浏览器提供了内置的媒体播放器，仍然可以使用Flash播放器作为旧浏览器。</p><h5 id="文件和文件名的规则"><a href="#文件和文件名的规则" class="headerlink" title="文件和文件名的规则"></a>文件和文件名的规则</h5><p>建议采用<strong>小写字母加短横线</strong>而不是<strong>首字母大写加下划线</strong>的形式，并用<code>.html</code>作为扩展名，有助于访问和搜索引擎的优化。注意，文件名称中也不要出现<strong>空格</strong>。</p><h5 id="URL-Uniform-Resource-Locator"><a href="#URL-Uniform-Resource-Locator" class="headerlink" title="URL(Uniform Resource Locator)"></a>URL(Uniform Resource Locator)</h5><p>包含关于文件存储位置和浏览器应如何处理它的信息，互联网上的每个文件都有唯一的URL。若URL路径不以文件名结尾，则对应一个目录中的默认文件，通常为<code>index.html</code>。URL分为绝对路径和相对路径，其中相对路径尽量使用<strong>根相对路径</strong></p><h5 id="语义？？"><a href="#语义？？" class="headerlink" title="语义？？"></a>语义？？</h5><p>语义化HTML指的是那些使用最恰当的HTML元素进行标记的内容，在标记的过程中并不关心内容显示。</p><ul><li>HTML提供六个标题级别，即<code>h1-h6</code>,用形如<code>&lt;h1&gt; xxx &lt;/h1&gt;</code>实现;</li><li>图像使用<code>img</code>,无元素;</li><li>段落使用<code>p</code>，段落用<code>&lt;p&gt;xxx&lt;/p&gt;</code>实现;</li><li>段落中可以嵌套<code>em</code>和<code>a</code>元素，其中<code>em</code>表示强调，通常会用<em>斜体</em>体现，在CSS中也可以修改。</li><li><code>a</code>表示anchor，用于定义链接，形如<code>&lt;a href=&quot;&quot; rel=&quot;&quot; title=&quot;&quot;&gt;&lt;xxx /a&gt;</code></li></ul><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li><code>&amp;copy</code>表示版权符号，<code>&lt;p&gt;&lt;small&gt;&amp;copy; Jason &lt;/small&gt;&lt;/p&gt;</code>, small表示法律声明等条纹细则;</li><li>发送电子邮件<code>mailto:xx@xxx.xxx</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTML-notebook-1-Components&quot;&gt;&lt;a href=&quot;#HTML-notebook-1-Components&quot; class=&quot;headerlink&quot; title=&quot;HTML notebook 1: Components&quot;&gt;&lt;/a&gt;HTML no
      
    
    </summary>
    
    
      <category term="html-css" scheme="http://www.mazhixian.me/all-tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib tips II</title>
    <link href="http://www.mazhixian.me/2017/12/20/matplotlib-tips-II/"/>
    <id>http://www.mazhixian.me/2017/12/20/matplotlib-tips-II/</id>
    <published>2017-12-20T05:16:34.000Z</published>
    <updated>2017-12-20T07:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><p>好久没写了，来填坑，<code>matplotlib</code>相关的tips第二篇。包括网格化子图、坐标轴反向、savefig以及stacked bar.</p><h5 id="1-matplotlib-gridspec"><a href="#1-matplotlib-gridspec" class="headerlink" title="1. matplotlib.gridspec"></a>1. matplotlib.gridspec</h5><p>首先是子图网格化，比较简单但高效的一种方式，相对subplot更好用。样例如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> gridspec</div><div class="line"><span class="comment"># initial grid 2 x 2</span></div><div class="line">gs = gridspec.GridSpec(<span class="number">2</span>, <span class="number">2</span>, width_ratios=[<span class="number">1</span>,<span class="number">1</span>], height_ratios=[<span class="number">1</span>,<span class="number">1</span>])</div><div class="line"></div><div class="line">ax0 = plt.subplot(gs[<span class="number">0</span>])</div><div class="line">xxxxxx</div><div class="line"></div><div class="line">as1 = plt.subplot(gs[<span class="number">1</span>])</div><div class="line">xxxxxx</div></pre></td></tr></table></figure></p><p>此处<code>width_ratios</code>和<code>height_ratios</code>参数用于调整横向和纵向的子图之间的比例关系，效果见Tip2.</p><h5 id="2-matplotlib的坐标轴翻转-反向"><a href="#2-matplotlib的坐标轴翻转-反向" class="headerlink" title="2. matplotlib的坐标轴翻转 (反向)"></a>2. matplotlib的坐标轴翻转 (反向)</h5><p>坐标轴反向主要出现在image相关的问题中。image通常以(row,column,channel)的数据结构出现，其y轴方向 (Vertical)与我们习惯的纵坐标镜像对称。因此，在处理图像的过程中，需要对坐标进行镜像对称，或者更简单的，对坐标轴进行翻转 (invert)。</p><ul><li>图像矩阵翻转<br>numpy包中的<code>flipud</code>方法可以用于图像的翻转，是常用方法之一。</li><li>坐标轴翻转<br>matplotlib.Axis类中提供了<code>invert_xaxis</code>和<code>invert_yaxis</code>两个方法，下面结合第一点的gridspec给出样例。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># display and invert</span></div><div class="line">plt.rcParams[<span class="string">"figure.figsize"</span>] = [<span class="number">10.0</span>, <span class="number">24.0</span>]</div><div class="line"></div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> gridspec</div><div class="line">gs = gridspec.GridSpec(<span class="number">1</span>,<span class="number">3</span>, width_ratios=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment"># raw direction</span></div><div class="line">ax0 = plt.subplot(gs[<span class="number">0</span>])</div><div class="line">ax0.imshow(img)</div><div class="line">ax0.set_xlabel(<span class="string">"Horizontal"</span>,fontsize=<span class="number">12</span>)</div><div class="line">ax0.set_ylabel(<span class="string">"Vertical"</span>,fontsize=<span class="number">12</span>)</div><div class="line">plt.title(<span class="string">"Raw direction"</span>,fontsize=<span class="number">12</span>)</div><div class="line"></div><div class="line"><span class="comment"># Y invert</span></div><div class="line">ax1 = plt.subplot(gs[<span class="number">1</span>])</div><div class="line">ax1.imshow(img)</div><div class="line">ax1.invert_yaxis()</div><div class="line">ax1.set_xlabel(<span class="string">"Horizontal"</span>,fontsize=<span class="number">12</span>)</div><div class="line">plt.title(<span class="string">"Y invert"</span>,fontsize=<span class="number">12</span>)</div><div class="line"></div><div class="line"><span class="comment"># X invert</span></div><div class="line">ax2 = plt.subplot(gs[<span class="number">2</span>])</div><div class="line">ax2.imshow(img)</div><div class="line">ax2.invert_xaxis()</div><div class="line">ax2.set_xlabel(<span class="string">"Horizontal"</span>,fontsize=<span class="number">12</span>)</div><div class="line">plt.title(<span class="string">"X invert"</span>,fontsize=<span class="number">12</span>)</div></pre></td></tr></table></figure><p>其输出的图像如下图所示</p><center><img src="https://github.com/myinxd/canal-images/raw/master/images/blog-171220/exp_invert.png" height="170" width="480"></center><h5 id="3-savefig问题"><a href="#3-savefig问题" class="headerlink" title="3. savefig问题"></a>3. savefig问题</h5><p>保存图像是最近遇到的问题，主要涉及分辨率和去白边的问题。当然，如果能得到矢量图，尽量做矢量图。。。savefig的形式如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xxxxx <span class="comment"># 做图的相关程序...</span></div><div class="line"></div><div class="line"><span class="comment"># save</span></div><div class="line">plt.savefig(name,dpi=<span class="number">300</span>,bbox_inches=<span class="string">"tight"</span>)</div></pre></td></tr></table></figure></p><p>此处的<code>dpi</code>表示“digits per inch”，数值越大分辨率越高;而<code>bbox_inches</code>用于控制输出的margin，如果实例化为”tight”可以去掉白边。</p><h5 id="4-stacked-bar"><a href="#4-stacked-bar" class="headerlink" title="4. stacked bar"></a>4. stacked bar</h5><p>Stacked bar属于直方图的一种，考虑到每个bin内部的样本可能会细分为某些类或者某些区间，为了更好的描述bin内部样本的分布，可以采用stacked bar plot. 在matplotlib的pyplot类中提供了<code>bar</code>方法用于做直方图，该方法的<code>bottom</code>参数用于vertical方向的stacked bar,而<code>left</code>和<code>right</code>参数可以用于horitontal方向的stacked bar。样例代码如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">plt.rcParams[<span class="string">"figure.figsize"</span>] = [<span class="number">7.0</span>, <span class="number">5.0</span>]</div><div class="line"></div><div class="line">bins = np.arange(<span class="number">0.5</span>, <span class="number">2.5</span>+<span class="number">0.5</span>, <span class="number">0.5</span>)</div><div class="line">data = np.array([[<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>],[<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">2</span> ,<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>]])</div><div class="line">data = data.T</div><div class="line">plt.bar(bins, data[:,<span class="number">0</span>], width=<span class="number">0.2</span>)</div><div class="line">plt.bar(bins, data[:,<span class="number">1</span>], width=<span class="number">0.2</span>, bottom=data[:,<span class="number">0</span>])</div><div class="line">plt.bar(bins, data[:,<span class="number">2</span>], width=<span class="number">0.2</span>, bottom=data[:,<span class="number">0</span>]+data[:,<span class="number">1</span>])</div><div class="line"></div><div class="line">plt.xlabel(<span class="string">"Bins"</span>,fontsize=<span class="number">12</span>)</div><div class="line">plt.ylabel(<span class="string">"Bars"</span>,fontsize=<span class="number">12</span>)</div><div class="line">plt.legend([<span class="string">"data-1"</span>, <span class="string">"data-2"</span>, <span class="string">"data-3"</span>],loc=<span class="number">2</span>,fontsize=<span class="number">12</span>)</div><div class="line">plt.ylim([<span class="number">0</span>,<span class="number">12</span>])</div></pre></td></tr></table></figure></p><p>其输出结果如下图</p><center><img src="https://github.com/myinxd/canal-images/raw/master/images/blog-171220/exp_stackbar.png" height="240" width="360"></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写了，来填坑，matplotlib相关的tips第二篇。包括网格化子图、坐标轴反向、savefig以及stacked bar.&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.mazhixian.me/all-tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Install tensorflow with gpu library CUDA on Ubuntu 16.04 x64</title>
    <link href="http://www.mazhixian.me/2017/12/13/Install-tensorflow-with-gpu-library-CUDA-on-Ubuntu-16-04-x64/"/>
    <id>http://www.mazhixian.me/2017/12/13/Install-tensorflow-with-gpu-library-CUDA-on-Ubuntu-16-04-x64/</id>
    <published>2017-12-13T06:33:31.000Z</published>
    <updated>2017-12-20T07:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><h3 id="System-and-Software-info"><a href="#System-and-Software-info" class="headerlink" title="System and Software info"></a>System and Software info</h3><ol><li>System: Ubuntu16.04</li><li>GPU card: Nvidia GeForce GT 620</li><li>tensoflow-gpu==1.2.1</li><li>CUDA: 8.0 <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="external">https://developer.nvidia.com/cuda-downloads</a> </li><li>cuDNN: v5.1 <a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="external">https://developer.nvidia.com/rdp/cudnn-download</a></li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li>TensofFlow <a href="http://www.tensorflow.org" target="_blank" rel="external">http://www.tensorflow.org</a></li><li>Chinese staffs<br>[1] <a href="http://blog.csdn.net/yichenmoyan/article/details/48679777" target="_blank" rel="external">http://blog.csdn.net/yichenmoyan/article/details/48679777</a><br>[2] <a href="http://blog.csdn.net/niuwei22007/article/details/50439478" target="_blank" rel="external">http://blog.csdn.net/niuwei22007/article/details/50439478</a></li></ol><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><ul><li><p>Install cuda, and configure path and LD_LIBRARY_PATH</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo dpkg -i cuda-repo-ubuntu1604-8-0-local_8.0.44-1_amd64.deb</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install cuda</div></pre></td></tr></table></figure></li><li><p>Configure path</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.bashrc</div><div class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/cuda-8.0/bin</div><div class="line">$ <span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-8.0/lib64:/lib</div></pre></td></tr></table></figure></li><li><p>Install cuDNN</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ tar -xvf cudnn-8.0-linux-x64-v5.1.tgz</div><div class="line">$ <span class="built_in">cd</span> cuda</div><div class="line">$ sudo cp ./lib64/* /usr/<span class="built_in">local</span>/cuda/lib64/</div><div class="line">$ sudo chmod 755 /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</div><div class="line">$ sudo cp ./include/cudnn.h /usr/<span class="built_in">local</span>/cuda/include/</div></pre></td></tr></table></figure></li><li><p>Install TensorFlow</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ &lt;sudo&gt; pip3 install &lt;--user&gt; &lt;--update&gt; tenforflow-gpu==1.2.1</div></pre></td></tr></table></figure></li></ul><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>Note that cuda 8.0 doesn’t support the default g++ version. Install an supported version and make it the default.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install g++-4.9</div><div class="line"></div><div class="line">$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 20</div><div class="line">$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10</div><div class="line"></div><div class="line">$ sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 20</div><div class="line">$ sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10</div><div class="line"></div><div class="line">$ sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30</div><div class="line">$ sudo update-alternatives --<span class="built_in">set</span> cc /usr/bin/gcc</div><div class="line"></div><div class="line">$ sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30</div><div class="line">$ sudo update-alternatives --<span class="built_in">set</span> c++ /usr/bin/g++</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;System and Software info&lt;br&gt;
    
    </summary>
    
    
      <category term="deep-learning" scheme="http://www.mazhixian.me/all-tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>Convolution in signal processing VS. convolution in CNN</title>
    <link href="http://www.mazhixian.me/2017/10/10/Convolution-in-signal-processing-VS-convolution-in-CNN/"/>
    <id>http://www.mazhixian.me/2017/10/10/Convolution-in-signal-processing-VS-convolution-in-CNN/</id>
    <published>2017-10-10T04:59:54.000Z</published>
    <updated>2017-12-20T07:58:09.043Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><p>萌节快乐，LOL!!</p><p>中午被老板召唤，讨论了论文的算法部分，其中有传统卷积和CNN中卷积的区别，以及他们和相关函数的关系，感觉可以讨论一下,装个B。（这里不涉及时频分析了，因为我忘记了。。。）</p><h3 id="Convolution-in-signal-processing"><a href="#Convolution-in-signal-processing" class="headerlink" title="Convolution in signal processing"></a>Convolution in signal processing</h3><p>首先说一下我对信号处理中的卷积的理解。信号处理的卷积表达的物理意义是<strong>信号通过系统以后的输出，是信号与系统相互作用的结果</strong>.</p><p>定义<script type="math/tex">f(t)</script>表示信号，<script type="math/tex">h(t)</script>表示，输出信号为<script type="math/tex">g(t)</script>，则有</p><script type="math/tex; mode=display">\begin{equation}g(t) = f(t)*h(t) = \int^{\infty}_{-\infty}{f(t-\tau)h(\tau)d\tau}.\end{equation}</script><p>其中<script type="math/tex">\tau</script>是积分变量。</p><p>这里的<script type="math/tex">t-\tau</script>理解为对信号做对称 (翻折) 变换，其物理意义是在<script type="math/tex">t_0</script>时刻通过系统并输出的信号<script type="math/tex">g(t_0)</script>除了受到<script type="math/tex">f(t_0)</script>的影响，还受到<script type="math/tex">t<t_0</script>的信号通过系统以后的累积作用的影响。通俗的说，某时刻的输出信号是该时刻之前的信号与此刻信号共同作用的结果。</p><p>以上是卷积在信号处理中的理解。</p><p>推广到高维空间也是如此，最典型的就是图像空间的滤波，用某个核函数与原图做卷积，进行图像处理。例如用拉普拉斯核与原图做图像锐化。下面给出二维空间滤波的连续和离散表达。</p><h4 id="Continous"><a href="#Continous" class="headerlink" title="Continous"></a>Continous</h4><script type="math/tex; mode=display">\begin{align}g(u,v) &= f(u,v)*h(u,v) \notag \\&=\int^{\infty}_{-\infty}{\int^{\infty}_{-\infty}}{f(u-\mu,v-\nu)h(\mu,\nu)d{\mu}d{\nu}}.\end{align}</script><h4 id="Discrete"><a href="#Discrete" class="headerlink" title="Discrete"></a>Discrete</h4><script type="math/tex; mode=display">\begin{align}g(m,n) &= f(m,n)*h(n,n) \notag \\&=\sum_{i}{\sum_{j}{f(m-i,n-j)h(i,j)}}.\end{align}</script><h3 id="Convolution-in-CNN"><a href="#Convolution-in-CNN" class="headerlink" title="Convolution in CNN"></a>Convolution in CNN</h3><p>然后我们来说卷积神经网络 (Convolutional Neural Network, CNN) 中的卷积，这里卷积的目的除了提取图像的特征，更重要的是缩小网络的参数数量。其物理意义是<strong>利用共享的权值矩阵 (卷积核) 以小块的形式遍历图像矩阵，获取图像在该卷积核下的响应，作为图像的特征</strong>。这里获取的特征也被成为特征图 (feature map)。</p><p>因为图像空间不考虑时序性，也即某点与卷积核作用的输出不会受到其他时刻的影响，所以直接做图像与卷积核的相关(correlation)即可。</p><p>定义图像矩阵为<script type="math/tex">I(m,n), m=1,\dots,M, n=1,\dots,N</script>，卷积核<script type="math/tex">G(i,j), i,j = 1,\dots,K</script>, 输出的特征图<script type="math/tex">F(p,q), p=1,\dots,P, q=1,\dots,Q</script>,则有</p><script type="math/tex; mode=display">\begin{align}F(p,q) &= I(m-K:m+K, n-K:n+K)*G \notag \\&=\sum^{K}_{i=1}{\sum^{K}_{j=1}{I(i,j)G(i,j)}}.\end{align}</script><p>通常，CNN卷积运算的输出矩阵与输入矩阵大小是不同的，这里涉及到”zero padding”的问题，在离散信号处理中也很常见。我在<a href="http://www.mazhixian.me/2017/09/01/Deconvolution-or-Transpose-opposite-operation-of-CNN/">这篇文章</a>讨论过，感兴趣的可以去围观。</p><p>最后，我认为CNN的卷积本质上就是相关运算，与信号处理的卷积不等价。只是因为相关运算的两个矩阵通常具有相同的大小，而CNN的卷积核通常远小于图像矩阵。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;萌节快乐，LOL!!&lt;br&gt;
    
    </summary>
    
    
      <category term="signal-processing" scheme="http://www.mazhixian.me/all-tags/signal-processing/"/>
    
  </entry>
  
</feed>
